/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bdaecb2018;

import java.awt.Image;
import java.awt.Canvas;
import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author MBanegas
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        ImageIcon img = new ImageIcon("./src/iconos/fondo.jpg");
        Icon image = new ImageIcon(img.getImage().getScaledInstance(jLabel15.getWidth(), jLabel15.getHeight(), Image.SCALE_DEFAULT));
        jLabel15.setIcon(image);
        String string = "BDAECB2018";
        this.setTitle(string);
        jd_crearusuario.setTitle(string);
        jd_menu.setTitle(string);
        jd_modificar.setTitle(string);
        this.setLocationRelativeTo(null);
        au.cargarArchivo();
        at.cargarArchivo();
        abd.cargarArchivo();
        for (int i = 0; i < abd.getBasesdedatos().size(); i++) {
            basesdedatos.add(abd.getBasesdedatos().get(i));
        }
        for (int i = 0; i < at.getLista().size(); i++) {
            tablas.add(at.getLista().get(i));
        }
        for (int i = 0; i < au.getUsuarios().size(); i++) {
            usuarios.add(au.getUsuarios().get(i));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jd_menu = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jt_usuarios = new javax.swing.JTree();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        sql = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        bt_agregarbd = new javax.swing.JButton();
        bt_eliminardb = new javax.swing.JButton();
        cargarbd = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        cb_guardaren = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jmi_crear = new javax.swing.JMenuItem();
        jmi_eliminar = new javax.swing.JMenuItem();
        jmi_modificar = new javax.swing.JMenuItem();
        jd_crearusuario = new javax.swing.JDialog();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tf_usuario = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        pf_contra = new javax.swing.JPasswordField();
        jLabel8 = new javax.swing.JLabel();
        pf_contraconfirm = new javax.swing.JPasswordField();
        jLabel9 = new javax.swing.JLabel();
        jcb_gestion = new javax.swing.JCheckBox();
        jcb_crear = new javax.swing.JCheckBox();
        jcb_seleccionar = new javax.swing.JCheckBox();
        jcb_insertar = new javax.swing.JCheckBox();
        jcb_eliminar = new javax.swing.JCheckBox();
        jcb_drop = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        jd_modificar = new javax.swing.JDialog();
        jButton3 = new javax.swing.JButton();
        jcb_drop1 = new javax.swing.JCheckBox();
        jcb_eliminar1 = new javax.swing.JCheckBox();
        jcb_insertar1 = new javax.swing.JCheckBox();
        jcb_seleccionar1 = new javax.swing.JCheckBox();
        jcb_crear1 = new javax.swing.JCheckBox();
        jcb_gestion1 = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        pf_contraconfirm1 = new javax.swing.JPasswordField();
        jLabel11 = new javax.swing.JLabel();
        pf_contra1 = new javax.swing.JPasswordField();
        jLabel12 = new javax.swing.JLabel();
        tf_usuario1 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jd_crearbd = new javax.swing.JDialog();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        tf_nombrebd = new javax.swing.JTextField();
        bt_crearbd = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        pf_cont = new javax.swing.JPasswordField();
        tf_usu = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();

        jd_menu.setBackground(new java.awt.Color(255, 255, 255));
        jd_menu.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                jd_menuWindowClosed(evt);
            }
        });
        jd_menu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jd_menuKeyPressed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jt_usuarios.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jt_usuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_usuariosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jt_usuarios);

        jLabel4.setText("Bases de Datos:");

        sql.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sqlKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(sql);

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tabla);

        bt_agregarbd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/crear.jpg"))); // NOI18N
        bt_agregarbd.setBorderPainted(false);
        bt_agregarbd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_agregarbdMouseClicked(evt);
            }
        });

        bt_eliminardb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/borrar.jpg"))); // NOI18N
        bt_eliminardb.setBorderPainted(false);
        bt_eliminardb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_eliminardbMouseClicked(evt);
            }
        });

        cargarbd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/iconos.png"))); // NOI18N
        cargarbd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cargarbdMouseClicked(evt);
            }
        });

        jLabel18.setText("Las tablas se guardaran en:");

        jMenu1.setText("Administracion");

        jmi_crear.setText("Crear Usuarios");
        jmi_crear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_crearActionPerformed(evt);
            }
        });
        jMenu1.add(jmi_crear);

        jmi_eliminar.setText("Eliminar Usuarios");
        jmi_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_eliminarActionPerformed(evt);
            }
        });
        jMenu1.add(jmi_eliminar);

        jmi_modificar.setText("Modificar mi Usuario");
        jmi_modificar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jmi_modificarMouseClicked(evt);
            }
        });
        jmi_modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_modificarActionPerformed(evt);
            }
        });
        jMenu1.add(jmi_modificar);

        jMenuBar1.add(jMenu1);

        jd_menu.setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout jd_menuLayout = new javax.swing.GroupLayout(jd_menu.getContentPane());
        jd_menu.getContentPane().setLayout(jd_menuLayout);
        jd_menuLayout.setHorizontalGroup(
            jd_menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_menuLayout.createSequentialGroup()
                .addGroup(jd_menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jd_menuLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)))
                .addGap(18, 18, 18)
                .addGroup(jd_menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 699, Short.MAX_VALUE))
                    .addGroup(jd_menuLayout.createSequentialGroup()
                        .addComponent(bt_agregarbd, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bt_eliminardb, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cargarbd, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(96, 96, 96)
                        .addGroup(jd_menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cb_guardaren, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jd_menuLayout.setVerticalGroup(
            jd_menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_menuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jd_menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_menuLayout.createSequentialGroup()
                        .addGroup(jd_menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bt_agregarbd, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cargarbd, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bt_eliminardb, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jd_menuLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel18)
                                .addGap(4, 4, 4)
                                .addComponent(cb_guardaren, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jd_menuLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE))))
        );

        jLabel5.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Crear Usuario");

        jLabel6.setText("Nombre de Usuario:");

        jLabel7.setText("Contraseña de Usuario:");

        pf_contra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pf_contraActionPerformed(evt);
            }
        });

        jLabel8.setText("Confirmar Contraseña:");

        jLabel9.setText("Permisos:");

        jcb_gestion.setText("Gestión de Usuarios");

        jcb_crear.setText("Crear Bases de Datos");

        jcb_seleccionar.setText("Seleccionar Bases de Datos");

        jcb_insertar.setText("Insertar Tablas");

        jcb_eliminar.setText("Eliminar Bases de Datos");

        jcb_drop.setText("Drop");

        jButton2.setText("Crear");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jd_crearusuarioLayout = new javax.swing.GroupLayout(jd_crearusuario.getContentPane());
        jd_crearusuario.getContentPane().setLayout(jd_crearusuarioLayout);
        jd_crearusuarioLayout.setHorizontalGroup(
            jd_crearusuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jd_crearusuarioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jd_crearusuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_crearusuarioLayout.createSequentialGroup()
                        .addGroup(jd_crearusuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jd_crearusuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tf_usuario)
                            .addComponent(pf_contra)
                            .addComponent(pf_contraconfirm, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)))
                    .addGroup(jd_crearusuarioLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addGroup(jd_crearusuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jd_crearusuarioLayout.createSequentialGroup()
                                .addComponent(jcb_gestion)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jcb_crear))
                            .addGroup(jd_crearusuarioLayout.createSequentialGroup()
                                .addGroup(jd_crearusuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jcb_seleccionar)
                                    .addGroup(jd_crearusuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jButton2)
                                        .addComponent(jcb_eliminar)))
                                .addGap(18, 18, 18)
                                .addGroup(jd_crearusuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jcb_drop)
                                    .addComponent(jcb_insertar))
                                .addGap(0, 30, Short.MAX_VALUE)))))
                .addGap(22, 22, 22))
        );
        jd_crearusuarioLayout.setVerticalGroup(
            jd_crearusuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_crearusuarioLayout.createSequentialGroup()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jd_crearusuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(tf_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jd_crearusuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(pf_contra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jd_crearusuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(pf_contraconfirm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jd_crearusuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jcb_gestion)
                    .addComponent(jcb_crear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jd_crearusuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcb_seleccionar)
                    .addComponent(jcb_insertar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jd_crearusuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcb_eliminar)
                    .addComponent(jcb_drop))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(0, 36, Short.MAX_VALUE))
        );

        jButton3.setText("Modificar");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jcb_drop1.setText("Drop");

        jcb_eliminar1.setText("Eliminar Bases de Datos");

        jcb_insertar1.setText("Insertar Tablas");

        jcb_seleccionar1.setText("Seleccionar Bases de Datos");

        jcb_crear1.setText("Crear Bases de Datos");

        jcb_gestion1.setText("Gestión de Usuarios");

        jLabel10.setText("Permisos:");

        jLabel11.setText("Confirmar Contraseña:");

        pf_contra1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pf_contra1ActionPerformed(evt);
            }
        });

        jLabel12.setText("Contraseña de Usuario:");

        jLabel13.setText("Nombre de Usuario:");

        jLabel14.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Modificar Usuario");

        javax.swing.GroupLayout jd_modificarLayout = new javax.swing.GroupLayout(jd_modificar.getContentPane());
        jd_modificar.getContentPane().setLayout(jd_modificarLayout);
        jd_modificarLayout.setHorizontalGroup(
            jd_modificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jd_modificarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jd_modificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_modificarLayout.createSequentialGroup()
                        .addGroup(jd_modificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jd_modificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tf_usuario1)
                            .addComponent(pf_contra1)
                            .addComponent(pf_contraconfirm1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)))
                    .addGroup(jd_modificarLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addGroup(jd_modificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jd_modificarLayout.createSequentialGroup()
                                .addComponent(jcb_gestion1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jcb_crear1))
                            .addGroup(jd_modificarLayout.createSequentialGroup()
                                .addGroup(jd_modificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jcb_seleccionar1)
                                    .addGroup(jd_modificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jButton3)
                                        .addComponent(jcb_eliminar1)))
                                .addGap(18, 18, 18)
                                .addGroup(jd_modificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jcb_drop1)
                                    .addComponent(jcb_insertar1))
                                .addGap(0, 30, Short.MAX_VALUE)))))
                .addGap(22, 22, 22))
        );
        jd_modificarLayout.setVerticalGroup(
            jd_modificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_modificarLayout.createSequentialGroup()
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jd_modificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(tf_usuario1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jd_modificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(pf_contra1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jd_modificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(pf_contraconfirm1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jd_modificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jcb_gestion1)
                    .addComponent(jcb_crear1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jd_modificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcb_seleccionar1)
                    .addComponent(jcb_insertar1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jd_modificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcb_eliminar1)
                    .addComponent(jcb_drop1))
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(0, 36, Short.MAX_VALUE))
        );

        jLabel16.setFont(new java.awt.Font("Tw Cen MT Condensed", 3, 24)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("CREAR BASE DE DATOS");

        jLabel17.setText("Nombre:");

        bt_crearbd.setText("Crear Base de Datos");
        bt_crearbd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_crearbdMouseClicked(evt);
            }
        });
        bt_crearbd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_crearbdActionPerformed(evt);
            }
        });

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("*El nombre debe ser unico.");

        javax.swing.GroupLayout jd_crearbdLayout = new javax.swing.GroupLayout(jd_crearbd.getContentPane());
        jd_crearbd.getContentPane().setLayout(jd_crearbdLayout);
        jd_crearbdLayout.setHorizontalGroup(
            jd_crearbdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jd_crearbdLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addGap(25, 25, 25)
                .addGroup(jd_crearbdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_crearbdLayout.createSequentialGroup()
                        .addComponent(bt_crearbd)
                        .addGap(0, 51, Short.MAX_VALUE))
                    .addComponent(tf_nombrebd))
                .addContainerGap())
            .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jd_crearbdLayout.setVerticalGroup(
            jd_crearbdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_crearbdLayout.createSequentialGroup()
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jd_crearbdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(tf_nombrebd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(bt_crearbd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("BDAECB2018");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 451, 38));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Usuario:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 101, -1, -1));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Contraseña:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 143, -1, -1));

        jButton1.setText("Iniciar Sesión");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(166, 215, -1, -1));

        pf_cont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pf_contActionPerformed(evt);
            }
        });
        pf_cont.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pf_contKeyPressed(evt);
            }
        });
        getContentPane().add(pf_cont, new org.netbeans.lib.awtextra.AbsoluteConstraints(183, 141, 125, -1));

        tf_usu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tf_usuKeyPressed(evt);
            }
        });
        getContentPane().add(tf_usu, new org.netbeans.lib.awtextra.AbsoluteConstraints(183, 99, 125, -1));
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 450, 350));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pf_contActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pf_contActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pf_contActionPerformed

    private void jmi_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_eliminarActionPerformed
        // TODO add your handling code here:
        String imprimir = "";
        for (int i = 0; i < au.getUsuarios().size(); i++) {
            imprimir += i + " - " + au.getUsuarios().get(i) + "\n";
        }
        try {
            int posicion = Integer.parseInt(JOptionPane.showInputDialog(imprimir + "Ingrese la posicion del usuario a eliminar:"));
            au.getUsuarios().remove(posicion);
            au.escribirArchivo();
            au.cargarArchivo();
            usuarios.clear();
            for (int i = 0; i < au.getUsuarios().size(); i++) {
                usuarios.add(au.getUsuarios().get(i));
            }
            JOptionPane.showMessageDialog(jd_menu, "Se elimino al usuario de manera exitosa!");
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jmi_eliminarActionPerformed

    private void pf_contraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pf_contraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pf_contraActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:    
        inicia();
    }//GEN-LAST:event_jButton1MouseClicked

    private void inicia() {
        boolean usuario = false;
        int index = 0;
        for (int i = 0; i < usuarios.size(); i++) {
            if (tf_usu.getText().equals(usuarios.get(i).getUsuario())) {
                usuario = true;
                index = i;
            }
        }
        if (usuario && pf_cont.getText().equals(usuarios.get(index).getContra())) {
            usuarioact = usuarios.get(index);
            indexglobal = index;
            if (usuarioact.isAdmin()) {
                jmi_crear.setEnabled(true);
                jmi_eliminar.setEnabled(true);
                jmi_modificar.setEnabled(true);
            } else {
                jmi_crear.setEnabled(false);
                jmi_eliminar.setEnabled(false);
                jmi_modificar.setEnabled(true);
            }
            DefaultComboBoxModel ade = new DefaultComboBoxModel();
            cb_guardaren.setModel(ade);
            process();
            admin = usuarioact.isAdmin();
            create = usuarioact.isCreate();
            select = usuarioact.isSelect();
            insert = usuarioact.isInsert();
            delete = usuarioact.isDelete();
            drop = usuarioact.isDrop();
            tf_usu.setText("");
            pf_cont.setText("");
            jd_menu.setModal(true);
            jd_menu.setLocationRelativeTo(this);
            jd_menu.pack();
            jd_menu.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "La contraseña o usuario son incorrectos!");
        }
    }

    private void process() {
        DefaultTreeModel modelo = (DefaultTreeModel) jt_usuarios.getModel();
        DefaultMutableTreeNode raiz = new DefaultMutableTreeNode("Bases de Datos");
        modelo.setRoot(raiz);
        DefaultMutableTreeNode princ = (DefaultMutableTreeNode) modelo.getRoot();
        DefaultMutableTreeNode agregar;
        for (int i = 0; i < basesdedatos.size(); i++) {
            DefaultMutableTreeNode tabs;
            if (basesdedatos.get(i).getUsuario().getUsuario().equals(usuarioact.getUsuario())) {
                agregar = new DefaultMutableTreeNode(basesdedatos.get(i));
                for (int j = 0; j < tablas.size(); j++) {
                    if (tablas.get(j).getBd().equals(basesdedatos.get(i).getNombre())) {
                        tabs = new DefaultMutableTreeNode(tablas.get(j));
                        agregar.add(tabs);
                    }
                }
                princ.add(agregar);
                DefaultComboBoxModel model = (DefaultComboBoxModel) cb_guardaren.getModel();
                model.addElement(basesdedatos.get(i));
            }
            for (int j = 0; j < basesdedatos.get(i).getColaboradores().size(); j++) {
                if (basesdedatos.get(i).getColaboradores().get(j).getUsuario().equals(usuarioact.getUsuario())) {
                    agregar = new DefaultMutableTreeNode(basesdedatos.get(i));
                    for (int k = 0; k < tablas.size(); k++) {
                        if (tablas.get(k).getBd().equals(basesdedatos.get(i).getNombre())) {
                            tabs = new DefaultMutableTreeNode(tablas.get(k));
                            agregar.add(tabs);
                        }
                    }
                    princ.add(agregar);
                    DefaultComboBoxModel model = (DefaultComboBoxModel) cb_guardaren.getModel();
                    model.addElement(basesdedatos.get(i));
                }
            }
        }
        modelo.reload();
    }

    private void jmi_crearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_crearActionPerformed
        // TODO add your handling code here:
        jd_crearusuario.setModal(true);
        jd_crearusuario.pack();
        jd_crearusuario.setLocationRelativeTo(jd_menu);
        jd_crearusuario.setVisible(true);
    }//GEN-LAST:event_jmi_crearActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        try {
            String usuario = tf_usuario.getText();
            String contra = pf_contra.getText();
            String contraconfirm = pf_contraconfirm.getText();
            if (contra.equals(contraconfirm) && !validUsuario(usuario)) {
                boolean admin = jcb_gestion.isSelected();
                boolean create = jcb_crear.isSelected();
                boolean select = jcb_seleccionar.isSelected();
                boolean insert = jcb_insertar.isSelected();
                boolean delete = jcb_eliminar.isSelected();
                boolean drop = jcb_drop.isSelected();
                au.getUsuarios().add(new Usuarios(usuario, contra, admin, create, select, insert, delete, drop));
                au.escribirArchivo();
                au.cargarArchivo();
                usuarios.clear();
                for (int i = 0; i < au.getUsuarios().size(); i++) {
                    usuarios.add(au.getUsuarios().get(i));
                }
                JOptionPane.showMessageDialog(jd_crearusuario, "Se creo el usuario de manera exitosa!");
                tf_usuario.setText("");
                pf_contra.setText("");
                pf_contraconfirm.setText("");
                jcb_crear.setSelected(false);
                jcb_drop.setSelected(false);
                jcb_eliminar.setSelected(false);
                jcb_gestion.setSelected(false);
                jcb_insertar.setSelected(false);
                jcb_seleccionar.setSelected(false);
                jd_crearusuario.dispose();
            } else {
                JOptionPane.showMessageDialog(jd_crearusuario, "Las contraseñas no son iguales y/o nombre\nde usuario ya esta siendo usado!");
                Integer.parseInt("aebc");
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void pf_contKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pf_contKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER) {
            inicia();
        }
    }//GEN-LAST:event_pf_contKeyPressed

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        try {
            String usuario = tf_usuario1.getText();
            String contra = pf_contra1.getText();
            String contraconfirm = pf_contraconfirm1.getText();
            if (contra.equals(contraconfirm)) {
                boolean admin = jcb_gestion1.isSelected();
                boolean create = jcb_crear1.isSelected();
                boolean select = jcb_seleccionar1.isSelected();
                boolean insert = jcb_insertar1.isSelected();
                boolean delete = jcb_eliminar1.isSelected();
                boolean drop = jcb_drop1.isSelected();
                au.getUsuarios().get(indexglobal).setAdmin(admin);
                au.getUsuarios().get(indexglobal).setContra(contra);
                au.getUsuarios().get(indexglobal).setCreate(create);
                au.getUsuarios().get(indexglobal).setDelete(delete);
                au.getUsuarios().get(indexglobal).setDrop(drop);
                au.getUsuarios().get(indexglobal).setInsert(insert);
                au.getUsuarios().get(indexglobal).setSelect(select);
                au.getUsuarios().get(indexglobal).setUsuario(usuario);
                au.escribirArchivo();
                au.cargarArchivo();
                usuarios.clear();
                for (int i = 0; i < au.getUsuarios().size(); i++) {
                    usuarios.add(au.getUsuarios().get(i));
                }
                JOptionPane.showMessageDialog(jd_modificar, "Se creo el usuario de manera exitosa!");
                tf_usuario1.setText("");
                pf_contra1.setText("");
                pf_contraconfirm1.setText("");
                jcb_crear1.setSelected(false);
                jcb_drop1.setSelected(false);
                jcb_eliminar1.setSelected(false);
                jcb_gestion1.setSelected(false);
                jcb_insertar1.setSelected(false);
                jcb_seleccionar1.setSelected(false);
                jd_modificar.dispose();
            } else {
                JOptionPane.showMessageDialog(jd_modificar, "Las contraseñas no son iguales!");
                Integer.parseInt("aebc");
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton3MouseClicked

    private void pf_contra1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pf_contra1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pf_contra1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jmi_modificarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jmi_modificarMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jmi_modificarMouseClicked

    private void jmi_modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_modificarActionPerformed
        // TODO add your handling code here:
        tf_usuario1.setText(au.getUsuarios().get(indexglobal).getUsuario());
        pf_contra1.setText(au.getUsuarios().get(indexglobal).getContra());
        pf_contraconfirm1.setText("");
        jcb_crear1.setSelected(au.getUsuarios().get(indexglobal).isCreate());
        jcb_drop1.setSelected(au.getUsuarios().get(indexglobal).isDrop());
        jcb_eliminar1.setSelected(au.getUsuarios().get(indexglobal).isDelete());
        jcb_gestion1.setSelected(au.getUsuarios().get(indexglobal).isAdmin());
        jcb_insertar1.setSelected(au.getUsuarios().get(indexglobal).isInsert());
        jcb_seleccionar1.setSelected(au.getUsuarios().get(indexglobal).isSelect());
        jd_modificar.pack();
        jd_modificar.setLocationRelativeTo(jd_menu);
        jd_modificar.setModal(true);
        jd_modificar.setVisible(true);
    }//GEN-LAST:event_jmi_modificarActionPerformed

    private void sqlKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sqlKeyPressed
        if (evt.getKeyCode() == evt.VK_SPACE || evt.getKeyCode() == evt.VK_ENTER) {
            ColPal cp = new ColPal(sql);
        }
        if (evt.getKeyCode() == evt.VK_ENTER) {
            try {
                String[] mostrar = sql.getText().split(" ");
                if (mostrar.length >= 1) {
                    switch (mostrar[0]) {
                        case "CREATE":
                            if (mostrar.length == 3) {
                                if (create) {
                                    if (mostrar[1].equals("DATABASE")) {
                                        boolean flag = true;
                                        for (int i = 0; i < basesdedatos.size(); i++) {
                                            if (mostrar[2].equals(basesdedatos.get(i).getNombre())) {
                                                JOptionPane.showMessageDialog(jd_menu, "Ya existe una base de datos con ese nombre, vuelva a intentar con otro nombre!");
                                            }
                                        }
                                        if (flag) {
                                            abd.getBasesdedatos().add(new bdatos(mostrar[2], usuarioact));
                                            abd.escribirArchivo();
                                            abd.cargarArchivo();
                                            basesdedatos.clear();
                                            for (int i = 0; i < abd.getBasesdedatos().size(); i++) {
                                                basesdedatos.add(abd.getBasesdedatos().get(i));
                                            }
                                            DefaultTreeModel modelo = (DefaultTreeModel) jt_usuarios.getModel();
                                            DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) modelo.getRoot();
                                            DefaultMutableTreeNode add = new DefaultMutableTreeNode(basesdedatos.get(basesdedatos.size() - 1));
                                            raiz.add(add);
                                            DefaultComboBoxModel model = (DefaultComboBoxModel) cb_guardaren.getModel();
                                            model.addElement(basesdedatos.get(basesdedatos.size() - 1));
                                            cb_guardaren.setModel(model);
                                            modelo.reload();
                                            JOptionPane.showMessageDialog(jd_menu, "Se creo de manera exitosa la base de datos!");
                                            sql.setText("");
                                        }
                                    }
                                    if (mostrar[1].equals("TABLE")) {
                                        boolean flag = true;
                                        Scanner p = new Scanner(mostrar[2]);
                                        p.useDelimiter("[(]");
                                        String n = p.next();
                                        for (int i = 0; i < tablas.size(); i++) {
                                            if (n.equals(tablas.get(i).getNombre())) {
                                                flag = false;
                                            }
                                        }
                                        if (flag) {
                                            Scanner sc = new Scanner(mostrar[2]);
                                            sc.useDelimiter("[(]");
                                            String nombre = sc.next();
                                            Scanner s2 = new Scanner(sc.next());
                                            s2.useDelimiter("[)]");
                                            Scanner s3 = new Scanner(s2.next());
                                            s3.useDelimiter(",");
                                            ArrayList<String> Atributos = new ArrayList();
                                            while (s3.hasNext()) {
                                                Atributos.add(s3.next());
                                            }
                                            Date fecha = new Date();
                                            DefaultTreeModel modelo = (DefaultTreeModel) jt_usuarios.getModel();
                                            DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) modelo.getRoot();
                                            DefaultMutableTreeNode hijo = null;
                                            for (int i = 0; i < raiz.getChildCount(); i++) {
                                                if (((bdatos) ((DefaultMutableTreeNode) (raiz.getChildAt(i))).getUserObject()).getNombre().equals(((bdatos) (cb_guardaren.getSelectedItem())).getNombre())) {
                                                    hijo = (DefaultMutableTreeNode) raiz.getChildAt(i);
                                                }
                                            }
                                            DefaultMutableTreeNode add = new DefaultMutableTreeNode(new Tablas(nombre, usuarioact.getUsuario(), fecha, cb_guardaren.getSelectedItem().toString()));
                                            Tablas nuevo = new Tablas(nombre, usuarioact.getUsuario(), fecha, cb_guardaren.getSelectedItem().toString());
                                            nuevo.setAtributos(Atributos);
                                            at.getLista().add(nuevo);
                                            hijo.add(add);
                                            modelo.reload();
                                            at.escribirArchivo();
                                            at.cargarArchivo();
                                            tablas.add(nuevo);
                                            process();
                                            JOptionPane.showMessageDialog(jd_menu, "Se creo la tabla de manera exitosa!");
                                            sql.setText("");
                                        } else {
                                            JOptionPane.showMessageDialog(jd_menu, "No se creo la tabla debido a que ya existe una tabla con ese nombre!");
                                        }
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(jd_menu, "Su usuario no tiene acceso para crear tablas ni bases de datos!");
                                }
                            }
                            break;
                        case "DROP":
                            if (mostrar.length == 3) {
                                if (drop) {
                                    if (mostrar[1].equals("DATABASE")) {
                                        String nombd = mostrar[2];
                                        for (int i = 0; i < basesdedatos.size(); i++) {
                                            if (nombd.equals(basesdedatos.get(i).getNombre())) {
                                                basesdedatos.remove(i);
                                                break;
                                            }
                                        }
                                        for (int i = 0; i < cb_guardaren.getItemCount(); i++) {
                                            if (nombd.equals(cb_guardaren.getItemAt(i))) {
                                                DefaultComboBoxModel model = (DefaultComboBoxModel) cb_guardaren.getModel();
                                                model.removeElementAt(i);
                                                cb_guardaren.setModel(model);
                                                break;
                                            }
                                        }
                                        abd.setBasesdedatos(basesdedatos);
                                        abd.escribirArchivo();
                                        abd.cargarArchivo();
                                        DefaultTreeModel modelo = (DefaultTreeModel) jt_usuarios.getModel();
                                        DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) modelo.getRoot();
                                        for (int i = 0; i < raiz.getChildCount(); i++) {
                                            if (nombd.equals(raiz.getChildAt(i).toString())) {
                                                raiz.remove(i);
                                                break;
                                            }
                                        }
                                        modelo.reload();
                                        JOptionPane.showMessageDialog(jd_menu, "Se elimino de forma correcta la base de datos!");
                                        sql.setText("");
                                    }
                                    if (mostrar[1].equals("TABLE")) {
                                        String nomtab = mostrar[2];
                                        DefaultTreeModel modelo = (DefaultTreeModel) jt_usuarios.getModel();
                                        DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) modelo.getRoot();
                                        DefaultMutableTreeNode adentro;
                                        for (int i = 0; i < raiz.getChildCount(); i++) {
                                            adentro = (DefaultMutableTreeNode) raiz.getChildAt(i);
                                            for (int j = 0; j < adentro.getChildCount(); j++) {
                                                String nombre = ((Tablas) ((DefaultMutableTreeNode) adentro.getChildAt(j)).getUserObject()).getNombre();
                                                if (nombre.equals(nomtab)) {
                                                    adentro.remove(j);
                                                    break;
                                                }
                                            }
                                        }
                                        modelo.reload();
                                        for (int i = 0; i < tablas.size(); i++) {
                                            if (nomtab.equals(tablas.get(i).getNombre())) {
                                                tablas.remove(i);
                                                break;
                                            }
                                        }
                                        at.setLista(tablas);
                                        at.escribirArchivo();
                                        at.cargarArchivo();
                                        JOptionPane.showMessageDialog(jd_menu, "Se elimino la tabla de forma correcto!");
                                        sql.setText("");
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(jd_menu, "Su usuario no tiene acceso para eliminar tablas u bases de datos!");
                                }
                            }
                            break;
                        case "GRANT":
                            if (mostrar.length == 5) {
                                if (mostrar[1].equals("DATABASE") && mostrar[3].equals("TO")) {
                                    String bd = mostrar[2];
                                    String usuario = mostrar[4];
                                    for (int i = 0; i < basesdedatos.size(); i++) {
                                        if (basesdedatos.get(i).getUsuario().getUsuario().equals(usuarioact.getUsuario()) && bd.equals(basesdedatos.get(i).getNombre())) {
                                            access = basesdedatos.get(i);
                                            break;
                                        } else {
                                            access = null;
                                        }
                                    }
                                    boolean flag = true;
                                    if (access != null) {
                                        for (int i = 0; i < access.getColaboradores().size(); i++) {
                                            if (usuario.equals(access.getColaboradores().get(i).getUsuario())) {
                                                flag = false;
                                            }
                                        }
                                    }
                                    if (flag) {
                                        for (int i = 0; i < usuarios.size(); i++) {
                                            if (usuario.equals(usuarios.get(i).getUsuario()) && !usuario.equals(usuarioact.getUsuario())) {
                                                usuarioaccess = usuarios.get(i);
                                                break;
                                            } else {
                                                usuarioaccess = null;
                                            }
                                        }
                                    } else {
                                        access = null;
                                    }
                                    if (access != null && usuarioaccess != null) {
                                        access.getColaboradores().add(usuarioaccess);
                                        abd.setBasesdedatos(basesdedatos);
                                        abd.escribirArchivo();
                                        abd.cargarArchivo();
                                        JOptionPane.showMessageDialog(jd_menu, "Se ha dado autorizacion al usuario para ingresar a la base de datos de manera correcta!");
                                        sql.setText("");
                                    } else {
                                        JOptionPane.showMessageDialog(jd_menu, "No existe la base de datos o el usuario!\nNo se puede compartir una base de datos consigomismo!");
                                        sql.setText("");
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(jd_menu, "Instruccion mal escrita!");
                                }
                            } else {
                                JOptionPane.showMessageDialog(jd_menu, "Instruccion mal escrita!");
                            }
                            break;
                        case "INSERT":

                            break;
                        case "SELECT":
                            break;
                        case "UPDATE":
                            break;
                        case "DELETE":
                            break;
                        case "TRUNCATE":
                            break;
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(jd_menu, "La linea de codigo esta mal escrita!");
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_sqlKeyPressed

    private void jd_menuKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jd_menuKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jd_menuKeyPressed

    private boolean validTabla(String nom) {
        for (int i = 0; i < tablas.size(); i++) {
            if (tablas.get(i).getNombre().equals(nom)) {
                return true;
            }
        }
        return false;
    }

    private boolean validUsuario(String nom) {
        for (int i = 0; i < usuarios.size(); i++) {
            if (nom.equals(usuarios.get(i).getUsuario())) {
                return true;
            }
        }
        return false;
    }

    private boolean validBD(String nom) {
        for (int i = 0; i < basesdedatos.size(); i++) {
            if (basesdedatos.get(i).getNombre().equals(nom)) {
                return true;
            }
        }
        return false;
    }

    private void jd_menuWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jd_menuWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_jd_menuWindowClosed

    private void bt_agregarbdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_agregarbdMouseClicked
        // TODO add your handling code here:
        jd_crearbd.setModal(true);
        jd_crearbd.setLocationRelativeTo(jd_menu);
        jd_crearbd.pack();
        jd_crearbd.setVisible(true);
    }//GEN-LAST:event_bt_agregarbdMouseClicked

    private void bt_crearbdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_crearbdMouseClicked
        // TODO add your handling code here:
        try {
            String nombre = tf_nombrebd.getText();
            abd.getBasesdedatos().add(new bdatos(nombre, usuarioact));
            abd.escribirArchivo();
            abd.cargarArchivo();
            basesdedatos.clear();
            for (int i = 0; i < abd.getBasesdedatos().size(); i++) {
                basesdedatos.add(abd.getBasesdedatos().get(i));
            }
            DefaultTreeModel modelo = (DefaultTreeModel) jt_usuarios.getModel();
            DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) modelo.getRoot();
            DefaultMutableTreeNode add = new DefaultMutableTreeNode(basesdedatos.get(basesdedatos.size() - 1));
            raiz.add(add);
            modelo.reload();
//            String nombre = tf_nombrebd.getText();
//            ArrayList<String> atributos = new ArrayList();
//            Scanner s = new Scanner(tf_atributos.getText());
//            s.useDelimiter(";");
//            while (s.hasNext()) {
//                atributos.add(s.next());
//            }
//            String creador = usuarioact.getUsuario();
//            Date fecha = new Date();
//            DefaultTreeModel modelo = (DefaultTreeModel) jt_usuarios.getModel();
//            DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) modelo.getRoot();
//            DefaultMutableTreeNode add;
//            at.getLista().add(new Tablas(nombre, creador, fecha));
//            at.getLista().get(at.getLista().size() - 1).setAtributos(atributos);
//            add = new DefaultMutableTreeNode(at.getLista().get(at.getLista().size() - 1));
//            raiz.add(add);
//            modelo.reload();
//            at.escribirArchivo();
//            at.cargarArchivo();
//            tablas.clear();
//            for (int i = 0; i < at.getLista().size(); i++) {
//                tablas.add(at.getLista().get(i));
//            }
//            tf_nombrebd.setText("");
//            tf_atributos.setText("");
//            JOptionPane.showMessageDialog(jd_crearbd, "Se creo la tabla de manera correcta!");
            jd_crearbd.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(jd_crearbd, "Algunos datos son incorrectos!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_bt_crearbdMouseClicked

    private void bt_crearbdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_crearbdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bt_crearbdActionPerformed

    private void jt_usuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_usuariosMouseClicked
        // TODO add your handling code here:
        if (evt.isMetaDown()) {
            int row = jt_usuarios.getClosestRowForLocation(evt.getX(), evt.getY());
            jt_usuarios.setSelectionRow(row);
        }
    }//GEN-LAST:event_jt_usuariosMouseClicked

    private void bt_eliminardbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_eliminardbMouseClicked
        // TODO add your handling code here:
        try {
            DefaultTreeModel modelo = (DefaultTreeModel) jt_usuarios.getModel();
            DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) modelo.getRoot();
            Object v1 = jt_usuarios.getSelectionPath().getLastPathComponent();
            if (((DefaultMutableTreeNode) v1).getUserObject() instanceof bdatos) {
                for (int i = 0; i < basesdedatos.size(); i++) {
                    if (basesdedatos.get(i).getNombre().equals(((bdatos) ((DefaultMutableTreeNode) v1).getUserObject()).getNombre())) {
                        basesdedatos.remove(i);
                    }
                }
                abd.setBasesdedatos(basesdedatos);
                abd.escribirArchivo();
                abd.cargarArchivo();
                for (int i = 0; i < ((DefaultMutableTreeNode) v1).getChildCount(); i++) {
                    for (int j = 0; j < tablas.size(); j++) {
                        if (tablas.get(j).getNombre().equals(((Tablas) ((DefaultMutableTreeNode) (((DefaultMutableTreeNode) v1).getChildAt(i))).getUserObject()).getNombre())) {
                            tablas.remove(j);
                        }
                    }
                }
                at.setLista(tablas);
                at.escribirArchivo();
                at.cargarArchivo();
                ((DefaultMutableTreeNode) v1).removeAllChildren();
                raiz.remove((DefaultMutableTreeNode) v1);
                modelo.reload();
                JOptionPane.showMessageDialog(jd_menu, "Se elimino la base de datos con sus tablas de forma correcta!");
            } else {
                JOptionPane.showMessageDialog(jd_menu, "El objeto seleccionado no es una base de datos!\nSeleccione una base de datos para ejecutar esta accion\nde forma correcta!");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(jd_menu, "Ha ocurrido un error!");
            e.printStackTrace();
        }
//        try {
//            DefaultTreeModel modelo = (DefaultTreeModel) jt_usuarios.getModel();
//            DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) modelo.getRoot();
//            Object v1 = jt_usuarios.getSelectionPath().getLastPathComponent();
//            for (int i = 0; i < tablas.size(); i++) {
//                if (tablas.get(i).getNombre().equals(((Tablas) ((DefaultMutableTreeNode) v1).getUserObject()).getNombre())) {
//                    tablas.remove(i);
//                }
//            }
//            at.setLista(tablas);
//            at.escribirArchivo();
//            raiz.remove((DefaultMutableTreeNode) v1);
//            modelo.reload();
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(jd_menu, "No hay una Base de Datos Seleccionada");
//            e.printStackTrace();
//        }
    }//GEN-LAST:event_bt_eliminardbMouseClicked

    private void cargarbdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cargarbdMouseClicked
        // TODO add your handling code here:
        try {
            Object v1 = jt_usuarios.getSelectionPath().getLastPathComponent();
            if (((DefaultMutableTreeNode) v1).getUserObject() instanceof Tablas) {
                cargada = ((Tablas) ((DefaultMutableTreeNode) v1).getUserObject());
                ArrayList<String> atrib = cargada.getAtributos();
                String[] titulo = new String[atrib.size()];
                for (int i = 0; i < titulo.length; i++) {
                    titulo[i] = atrib.get(i);
                }
                tabla.setModel(new javax.swing.table.DefaultTableModel(
                        new Object[][]{},
                        titulo
                ));
                DefaultTableModel tm = (DefaultTableModel) tabla.getModel();
                ArrayList<String> detalle = cargada.getDetalle();
                for (int i = 0; i < detalle.size(); i++) {
                    Object[] row = detalle.get(i).split(",");
                    tm.addRow(row);
                }
                tabla.setModel(tm);
                JOptionPane.showMessageDialog(jd_menu, "Se cargo la tabla de manera correcta!");
            } else {
                JOptionPane.showMessageDialog(jd_menu, "El objeto seleccionado no es una tabla!");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(jd_menu, "Ha ocurrido un error");
            e.printStackTrace();
        }
    }//GEN-LAST:event_cargarbdMouseClicked

    private void tf_usuKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_usuKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER) {
            inicia();
        }
    }//GEN-LAST:event_tf_usuKeyPressed

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER) {
            inicia();
        }
    }//GEN-LAST:event_jButton1KeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_agregarbd;
    private javax.swing.JButton bt_crearbd;
    private javax.swing.JButton bt_eliminardb;
    private javax.swing.JButton cargarbd;
    private javax.swing.JComboBox<String> cb_guardaren;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JCheckBox jcb_crear;
    private javax.swing.JCheckBox jcb_crear1;
    private javax.swing.JCheckBox jcb_drop;
    private javax.swing.JCheckBox jcb_drop1;
    private javax.swing.JCheckBox jcb_eliminar;
    private javax.swing.JCheckBox jcb_eliminar1;
    private javax.swing.JCheckBox jcb_gestion;
    private javax.swing.JCheckBox jcb_gestion1;
    private javax.swing.JCheckBox jcb_insertar;
    private javax.swing.JCheckBox jcb_insertar1;
    private javax.swing.JCheckBox jcb_seleccionar;
    private javax.swing.JCheckBox jcb_seleccionar1;
    private javax.swing.JDialog jd_crearbd;
    private javax.swing.JDialog jd_crearusuario;
    private javax.swing.JDialog jd_menu;
    private javax.swing.JDialog jd_modificar;
    private javax.swing.JMenuItem jmi_crear;
    private javax.swing.JMenuItem jmi_eliminar;
    private javax.swing.JMenuItem jmi_modificar;
    private javax.swing.JTree jt_usuarios;
    private javax.swing.JPasswordField pf_cont;
    private javax.swing.JPasswordField pf_contra;
    private javax.swing.JPasswordField pf_contra1;
    private javax.swing.JPasswordField pf_contraconfirm;
    private javax.swing.JPasswordField pf_contraconfirm1;
    private javax.swing.JTextPane sql;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField tf_nombrebd;
    private javax.swing.JTextField tf_usu;
    private javax.swing.JTextField tf_usuario;
    private javax.swing.JTextField tf_usuario1;
    // End of variables declaration//GEN-END:variables
    administrarUsuarios au = new administrarUsuarios("./Usuarios.dbaecb");
    ArrayList<Usuarios> usuarios = new ArrayList();
    Usuarios usuarioact, usuarioaccess;
    int indexglobal;
    ArrayList<Tablas> tablas = new ArrayList();
    administrarTablas at = new administrarTablas("./BDAECB.txt");
    administrarBDdatos abd = new administrarBDdatos("./BasesdeDatos.bdaecb");
    Object v1;
    Tablas cargada, ref;
    private boolean admin;
    private boolean create;
    private boolean select;
    private boolean insert;
    private boolean delete;
    private boolean drop;
    ArrayList<bdatos> basesdedatos = new ArrayList();
    bdatos access;
}
